
const blake3 = @import("../blake3.zig");
pub const llvm_blake3_version = blake3.llvm_blake3_version;
pub const llvm_blake3_hasher_init = blake3.llvm_blake3_hasher_init;
pub const llvm_blake3_hasher_init_keyed = blake3.llvm_blake3_hasher_init_keyed;
pub const llvm_blake3_hasher_init_derive_key = blake3.llvm_blake3_hasher_init_derive_key;
pub const llvm_blake3_hasher_init_derive_key_raw = blake3.llvm_blake3_hasher_init_derive_key_raw;
pub const llvm_blake3_hasher_update = blake3.llvm_blake3_hasher_update;
pub const llvm_blake3_hasher_finalize = blake3.llvm_blake3_hasher_finalize;
pub const llvm_blake3_hasher_finalize_seek = blake3.llvm_blake3_hasher_finalize_seek;
pub const llvm_blake3_hasher_reset = blake3.llvm_blake3_hasher_reset;
const core = @import("../core.zig");
pub const shutdown = core.LLVMShutdown;
pub const getVersion = core.LLVMGetVersion;
pub const createMessage = core.LLVMCreateMessage;
pub const disposeMessage = core.LLVMDisposeMessage;
pub const getMDKindID = core.LLVMGetMDKindID;
pub const getEnumAttributeKindForName = core.LLVMGetEnumAttributeKindForName;
pub const getLastEnumAttributeKind = core.LLVMGetLastEnumAttributeKind;
pub const disposeModuleFlagsMetadata = core.LLVMDisposeModuleFlagsMetadata;
pub const moduleFlagEntriesGetFlagBehavior = core.LLVMModuleFlagEntriesGetFlagBehavior;
pub const moduleFlagEntriesGetKey = core.LLVMModuleFlagEntriesGetKey;
pub const disposeValueMetadataEntries = core.LLVMDisposeValueMetadataEntries;
pub const valueMetadataEntriesGetKind = core.LLVMValueMetadataEntriesGetKind;
pub const lookupIntrinsicID = core.LLVMLookupIntrinsicID;
pub const intrinsicGetName = core.LLVMIntrinsicGetName;
pub const intrinsicCopyOverloadedName = core.LLVMIntrinsicCopyOverloadedName;
pub const intrinsicIsOverloaded = core.LLVMIntrinsicIsOverloaded;
pub const getUndefMaskElem = core.LLVMGetUndefMaskElem;
pub const createMemoryBufferWithContentsOfFile = core.LLVMCreateMemoryBufferWithContentsOfFile;
pub const createMemoryBufferWithSTDIN = core.LLVMCreateMemoryBufferWithSTDIN;
pub const startMultithreaded = core.LLVMStartMultithreaded;
pub const stopMultithreaded = core.LLVMStopMultithreaded;
pub const isMultithreaded = core.LLVMIsMultithreaded;
const debuginfo = @import("../debuginfo.zig");
pub const debugMetadataVersion = debuginfo.LLVMDebugMetadataVersion;
const error_handling = @import("../error_handling.zig");
pub const installFatalErrorHandler = error_handling.LLVMInstallFatalErrorHandler;
pub const resetFatalErrorHandler = error_handling.LLVMResetFatalErrorHandler;
pub const enablePrettyStackTrace = error_handling.LLVMEnablePrettyStackTrace;
const errors = @import("../errors.zig");
pub const disposeErrorMessage = errors.LLVMDisposeErrorMessage;
pub const getStringErrorTypeId = errors.LLVMGetStringErrorTypeId;
const executionEngine = @import("../executionEngine.zig");
pub const linkInMCJIT = executionEngine.LLVMLinkInMCJIT;
pub const linkInInterpreter = executionEngine.LLVMLinkInInterpreter;
pub const createExecutionEngineForModule = executionEngine.LLVMCreateExecutionEngineForModule;
pub const createInterpreterForModule = executionEngine.LLVMCreateInterpreterForModule;
pub const createJITCompilerForModule = executionEngine.LLVMCreateJITCompilerForModule;
pub const initializeMCJITCompilerOptions = executionEngine.LLVMInitializeMCJITCompilerOptions;
pub const createMCJITCompilerForModule = executionEngine.LLVMCreateMCJITCompilerForModule;
const lto = @import("../lto.zig");
pub const lto_get_version = lto.lto_get_version;
pub const lto_get_error_message = lto.lto_get_error_message;
pub const lto_module_is_object_file = lto.lto_module_is_object_file;
pub const lto_module_is_object_file_for_target = lto.lto_module_is_object_file_for_target;
pub const lto_module_has_objc_category = lto.lto_module_has_objc_category;
pub const lto_module_is_object_file_in_memory = lto.lto_module_is_object_file_in_memory;
pub const lto_module_is_object_file_in_memory_for_target = lto.lto_module_is_object_file_in_memory_for_target;
pub const lto_module_create = lto.lto_module_create;
pub const lto_module_create_from_memory = lto.lto_module_create_from_memory;
pub const lto_module_create_from_memory_with_path = lto.lto_module_create_from_memory_with_path;
pub const lto_module_create_in_local_context = lto.lto_module_create_in_local_context;
pub const lto_module_create_in_codegen_context = lto.lto_module_create_in_codegen_context;
pub const lto_module_create_from_fd = lto.lto_module_create_from_fd;
pub const lto_module_create_from_fd_at_offset = lto.lto_module_create_from_fd_at_offset;
pub const lto_module_dispose = lto.lto_module_dispose;
pub const lto_module_get_target_triple = lto.lto_module_get_target_triple;
pub const lto_module_set_target_triple = lto.lto_module_set_target_triple;
pub const lto_module_get_num_symbols = lto.lto_module_get_num_symbols;
pub const lto_module_get_symbol_name = lto.lto_module_get_symbol_name;
pub const lto_module_get_symbol_attribute = lto.lto_module_get_symbol_attribute;
pub const lto_module_get_linkeropts = lto.lto_module_get_linkeropts;
pub const lto_module_get_macho_cputype = lto.lto_module_get_macho_cputype;
pub const lto_module_has_ctor_dtor = lto.lto_module_has_ctor_dtor;
pub const lto_codegen_set_diagnostic_handler = lto.lto_codegen_set_diagnostic_handler;
pub const lto_codegen_create = lto.lto_codegen_create;
pub const lto_codegen_create_in_local_context = lto.lto_codegen_create_in_local_context;
pub const lto_codegen_dispose = lto.lto_codegen_dispose;
pub const lto_codegen_add_module = lto.lto_codegen_add_module;
pub const lto_codegen_set_module = lto.lto_codegen_set_module;
pub const lto_codegen_set_debug_model = lto.lto_codegen_set_debug_model;
pub const lto_codegen_set_pic_model = lto.lto_codegen_set_pic_model;
pub const lto_codegen_set_cpu = lto.lto_codegen_set_cpu;
pub const lto_codegen_set_assembler_path = lto.lto_codegen_set_assembler_path;
pub const lto_codegen_set_assembler_args = lto.lto_codegen_set_assembler_args;
pub const lto_codegen_add_must_preserve_symbol = lto.lto_codegen_add_must_preserve_symbol;
pub const lto_codegen_write_merged_modules = lto.lto_codegen_write_merged_modules;
pub const lto_codegen_compile = lto.lto_codegen_compile;
pub const lto_codegen_compile_to_file = lto.lto_codegen_compile_to_file;
pub const lto_codegen_optimize = lto.lto_codegen_optimize;
pub const lto_codegen_compile_optimized = lto.lto_codegen_compile_optimized;
pub const lto_api_version = lto.lto_api_version;
pub const lto_set_debug_options = lto.lto_set_debug_options;
pub const lto_codegen_debug_options = lto.lto_codegen_debug_options;
pub const lto_codegen_debug_options_array = lto.lto_codegen_debug_options_array;
pub const lto_initialize_disassembler = lto.lto_initialize_disassembler;
pub const lto_codegen_set_should_internalize = lto.lto_codegen_set_should_internalize;
pub const lto_codegen_set_should_embed_uselists = lto.lto_codegen_set_should_embed_uselists;
pub const lto_input_create = lto.lto_input_create;
pub const lto_input_dispose = lto.lto_input_dispose;
pub const lto_input_get_num_dependent_libraries = lto.lto_input_get_num_dependent_libraries;
pub const lto_input_get_dependent_library = lto.lto_input_get_dependent_library;
pub const lto_runtime_lib_symbols_list = lto.lto_runtime_lib_symbols_list;
pub const thinlto_create_codegen = lto.thinlto_create_codegen;
pub const thinlto_codegen_dispose = lto.thinlto_codegen_dispose;
pub const thinlto_codegen_add_module = lto.thinlto_codegen_add_module;
pub const thinlto_codegen_process = lto.thinlto_codegen_process;
pub const thinlto_module_get_num_objects = lto.thinlto_module_get_num_objects;
pub const thinlto_module_get_object = lto.thinlto_module_get_object;
pub const thinlto_module_get_num_object_files = lto.thinlto_module_get_num_object_files;
pub const thinlto_module_get_object_file = lto.thinlto_module_get_object_file;
pub const thinlto_codegen_set_pic_model = lto.thinlto_codegen_set_pic_model;
pub const thinlto_codegen_set_savetemps_dir = lto.thinlto_codegen_set_savetemps_dir;
pub const thinlto_set_generated_objects_dir = lto.thinlto_set_generated_objects_dir;
pub const thinlto_codegen_set_cpu = lto.thinlto_codegen_set_cpu;
pub const thinlto_codegen_disable_codegen = lto.thinlto_codegen_disable_codegen;
pub const thinlto_codegen_set_codegen_only = lto.thinlto_codegen_set_codegen_only;
pub const thinlto_debug_options = lto.thinlto_debug_options;
pub const lto_module_is_thinlto = lto.lto_module_is_thinlto;
pub const thinlto_codegen_add_must_preserve_symbol = lto.thinlto_codegen_add_must_preserve_symbol;
pub const thinlto_codegen_add_cross_referenced_symbol = lto.thinlto_codegen_add_cross_referenced_symbol;
pub const thinlto_codegen_set_cache_dir = lto.thinlto_codegen_set_cache_dir;
pub const thinlto_codegen_set_cache_pruning_interval = lto.thinlto_codegen_set_cache_pruning_interval;
pub const thinlto_codegen_set_final_cache_size_relative_to_available_space = lto.thinlto_codegen_set_final_cache_size_relative_to_available_space;
pub const thinlto_codegen_set_cache_entry_expiration = lto.thinlto_codegen_set_cache_entry_expiration;
pub const thinlto_codegen_set_cache_size_bytes = lto.thinlto_codegen_set_cache_size_bytes;
pub const thinlto_codegen_set_cache_size_megabytes = lto.thinlto_codegen_set_cache_size_megabytes;
pub const thinlto_codegen_set_cache_size_files = lto.thinlto_codegen_set_cache_size_files;
const orcee = @import("../orcee.zig");
pub const orcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager = orcee.LLVMOrcCreateRTDyldObjectLinkingLayerWithSectionMemoryManager;
pub const orcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks = orcee.LLVMOrcCreateRTDyldObjectLinkingLayerWithMCJITMemoryManagerLikeCallbacks;
pub const orcRTDyldObjectLinkingLayerRegisterJITEventListener = orcee.LLVMOrcRTDyldObjectLinkingLayerRegisterJITEventListener;
const orc = @import("../orc.zig");
pub const orcDisposeCSymbolFlagsMap = orc.LLVMOrcDisposeCSymbolFlagsMap;
pub const orcDisposeSymbols = orc.LLVMOrcDisposeSymbols;
const remarks = @import("../remarks.zig");
pub const remarkVersion = remarks.LLVMRemarkVersion;
const support = @import("../support.zig");
pub const loadLibraryPermanently = support.LLVMLoadLibraryPermanently;
pub const parseCommandLineOptions = support.LLVMParseCommandLineOptions;
pub const searchForAddressOfSymbol = support.LLVMSearchForAddressOfSymbol;
pub const addSymbol = support.LLVMAddSymbol;
const target_machine = @import("../target_machine.zig");
pub const getTargetFromTriple = target_machine.LLVMGetTargetFromTriple;
pub const getDefaultTargetTriple = target_machine.LLVMGetDefaultTargetTriple;
pub const normalizeTargetTriple = target_machine.LLVMNormalizeTargetTriple;
pub const getHostCPUName = target_machine.LLVMGetHostCPUName;
pub const getHostCPUFeatures = target_machine.LLVMGetHostCPUFeatures;
const target = @import("../target.zig");
pub const initializeAArch64TargetInfo = target.LLVMInitializeAArch64TargetInfo;
pub const initializeAMDGPUTargetInfo = target.LLVMInitializeAMDGPUTargetInfo;
pub const initializeARMTargetInfo = target.LLVMInitializeARMTargetInfo;
pub const initializeAVRTargetInfo = target.LLVMInitializeAVRTargetInfo;
pub const initializeBPFTargetInfo = target.LLVMInitializeBPFTargetInfo;
pub const initializeHexagonTargetInfo = target.LLVMInitializeHexagonTargetInfo;
pub const initializeLanaiTargetInfo = target.LLVMInitializeLanaiTargetInfo;
pub const initializeMipsTargetInfo = target.LLVMInitializeMipsTargetInfo;
pub const initializeMSP430TargetInfo = target.LLVMInitializeMSP430TargetInfo;
pub const initializeNVPTXTargetInfo = target.LLVMInitializeNVPTXTargetInfo;
pub const initializePowerPCTargetInfo = target.LLVMInitializePowerPCTargetInfo;
pub const initializeRISCVTargetInfo = target.LLVMInitializeRISCVTargetInfo;
pub const initializeSparcTargetInfo = target.LLVMInitializeSparcTargetInfo;
pub const initializeSystemZTargetInfo = target.LLVMInitializeSystemZTargetInfo;
pub const initializeWebAssemblyTargetInfo = target.LLVMInitializeWebAssemblyTargetInfo;
pub const initializeX86TargetInfo = target.LLVMInitializeX86TargetInfo;
pub const initializeXCoreTargetInfo = target.LLVMInitializeXCoreTargetInfo;
pub const initializeVETargetInfo = target.LLVMInitializeVETargetInfo;
pub const initializeAArch64Target = target.LLVMInitializeAArch64Target;
pub const initializeAMDGPUTarget = target.LLVMInitializeAMDGPUTarget;
pub const initializeARMTarget = target.LLVMInitializeARMTarget;
pub const initializeAVRTarget = target.LLVMInitializeAVRTarget;
pub const initializeBPFTarget = target.LLVMInitializeBPFTarget;
pub const initializeHexagonTarget = target.LLVMInitializeHexagonTarget;
pub const initializeLanaiTarget = target.LLVMInitializeLanaiTarget;
pub const initializeMipsTarget = target.LLVMInitializeMipsTarget;
pub const initializeMSP430Target = target.LLVMInitializeMSP430Target;
pub const initializeNVPTXTarget = target.LLVMInitializeNVPTXTarget;
pub const initializePowerPCTarget = target.LLVMInitializePowerPCTarget;
pub const initializeRISCVTarget = target.LLVMInitializeRISCVTarget;
pub const initializeSparcTarget = target.LLVMInitializeSparcTarget;
pub const initializeSystemZTarget = target.LLVMInitializeSystemZTarget;
pub const initializeWebAssemblyTarget = target.LLVMInitializeWebAssemblyTarget;
pub const initializeX86Target = target.LLVMInitializeX86Target;
pub const initializeXCoreTarget = target.LLVMInitializeXCoreTarget;
pub const initializeVETarget = target.LLVMInitializeVETarget;
pub const initializeAArch64TargetMC = target.LLVMInitializeAArch64TargetMC;
pub const initializeAMDGPUTargetMC = target.LLVMInitializeAMDGPUTargetMC;
pub const initializeARMTargetMC = target.LLVMInitializeARMTargetMC;
pub const initializeAVRTargetMC = target.LLVMInitializeAVRTargetMC;
pub const initializeBPFTargetMC = target.LLVMInitializeBPFTargetMC;
pub const initializeHexagonTargetMC = target.LLVMInitializeHexagonTargetMC;
pub const initializeLanaiTargetMC = target.LLVMInitializeLanaiTargetMC;
pub const initializeMipsTargetMC = target.LLVMInitializeMipsTargetMC;
pub const initializeMSP430TargetMC = target.LLVMInitializeMSP430TargetMC;
pub const initializeNVPTXTargetMC = target.LLVMInitializeNVPTXTargetMC;
pub const initializePowerPCTargetMC = target.LLVMInitializePowerPCTargetMC;
pub const initializeRISCVTargetMC = target.LLVMInitializeRISCVTargetMC;
pub const initializeSparcTargetMC = target.LLVMInitializeSparcTargetMC;
pub const initializeSystemZTargetMC = target.LLVMInitializeSystemZTargetMC;
pub const initializeWebAssemblyTargetMC = target.LLVMInitializeWebAssemblyTargetMC;
pub const initializeX86TargetMC = target.LLVMInitializeX86TargetMC;
pub const initializeXCoreTargetMC = target.LLVMInitializeXCoreTargetMC;
pub const initializeVETargetMC = target.LLVMInitializeVETargetMC;
pub const initializeAArch64AsmPrinter = target.LLVMInitializeAArch64AsmPrinter;
pub const initializeAMDGPUAsmPrinter = target.LLVMInitializeAMDGPUAsmPrinter;
pub const initializeARMAsmPrinter = target.LLVMInitializeARMAsmPrinter;
pub const initializeAVRAsmPrinter = target.LLVMInitializeAVRAsmPrinter;
pub const initializeBPFAsmPrinter = target.LLVMInitializeBPFAsmPrinter;
pub const initializeHexagonAsmPrinter = target.LLVMInitializeHexagonAsmPrinter;
pub const initializeLanaiAsmPrinter = target.LLVMInitializeLanaiAsmPrinter;
pub const initializeMipsAsmPrinter = target.LLVMInitializeMipsAsmPrinter;
pub const initializeMSP430AsmPrinter = target.LLVMInitializeMSP430AsmPrinter;
pub const initializeNVPTXAsmPrinter = target.LLVMInitializeNVPTXAsmPrinter;
pub const initializePowerPCAsmPrinter = target.LLVMInitializePowerPCAsmPrinter;
pub const initializeRISCVAsmPrinter = target.LLVMInitializeRISCVAsmPrinter;
pub const initializeSparcAsmPrinter = target.LLVMInitializeSparcAsmPrinter;
pub const initializeSystemZAsmPrinter = target.LLVMInitializeSystemZAsmPrinter;
pub const initializeWebAssemblyAsmPrinter = target.LLVMInitializeWebAssemblyAsmPrinter;
pub const initializeX86AsmPrinter = target.LLVMInitializeX86AsmPrinter;
pub const initializeXCoreAsmPrinter = target.LLVMInitializeXCoreAsmPrinter;
pub const initializeVEAsmPrinter = target.LLVMInitializeVEAsmPrinter;
pub const initializeAArch64AsmParser = target.LLVMInitializeAArch64AsmParser;
pub const initializeAMDGPUAsmParser = target.LLVMInitializeAMDGPUAsmParser;
pub const initializeARMAsmParser = target.LLVMInitializeARMAsmParser;
pub const initializeAVRAsmParser = target.LLVMInitializeAVRAsmParser;
pub const initializeBPFAsmParser = target.LLVMInitializeBPFAsmParser;
pub const initializeHexagonAsmParser = target.LLVMInitializeHexagonAsmParser;
pub const initializeLanaiAsmParser = target.LLVMInitializeLanaiAsmParser;
pub const initializeMipsAsmParser = target.LLVMInitializeMipsAsmParser;
pub const initializeMSP430AsmParser = target.LLVMInitializeMSP430AsmParser;
pub const initializePowerPCAsmParser = target.LLVMInitializePowerPCAsmParser;
pub const initializeRISCVAsmParser = target.LLVMInitializeRISCVAsmParser;
pub const initializeSparcAsmParser = target.LLVMInitializeSparcAsmParser;
pub const initializeSystemZAsmParser = target.LLVMInitializeSystemZAsmParser;
pub const initializeWebAssemblyAsmParser = target.LLVMInitializeWebAssemblyAsmParser;
pub const initializeX86AsmParser = target.LLVMInitializeX86AsmParser;
pub const initializeVEAsmParser = target.LLVMInitializeVEAsmParser;
pub const initializeAArch64Disassembler = target.LLVMInitializeAArch64Disassembler;
pub const initializeAMDGPUDisassembler = target.LLVMInitializeAMDGPUDisassembler;
pub const initializeARMDisassembler = target.LLVMInitializeARMDisassembler;
pub const initializeAVRDisassembler = target.LLVMInitializeAVRDisassembler;
pub const initializeBPFDisassembler = target.LLVMInitializeBPFDisassembler;
pub const initializeHexagonDisassembler = target.LLVMInitializeHexagonDisassembler;
pub const initializeLanaiDisassembler = target.LLVMInitializeLanaiDisassembler;
pub const initializeMipsDisassembler = target.LLVMInitializeMipsDisassembler;
pub const initializeMSP430Disassembler = target.LLVMInitializeMSP430Disassembler;
pub const initializePowerPCDisassembler = target.LLVMInitializePowerPCDisassembler;
pub const initializeRISCVDisassembler = target.LLVMInitializeRISCVDisassembler;
pub const initializeSparcDisassembler = target.LLVMInitializeSparcDisassembler;
pub const initializeSystemZDisassembler = target.LLVMInitializeSystemZDisassembler;
pub const initializeVEDisassembler = target.LLVMInitializeVEDisassembler;
pub const initializeWebAssemblyDisassembler = target.LLVMInitializeWebAssemblyDisassembler;
pub const initializeX86Disassembler = target.LLVMInitializeX86Disassembler;
pub const initializeXCoreDisassembler = target.LLVMInitializeXCoreDisassembler;
pub const initializeAllTargetInfos = target.LLVMInitializeAllTargetInfos;
pub const initializeAllTargets = target.LLVMInitializeAllTargets;
pub const initializeAllTargetMCs = target.LLVMInitializeAllTargetMCs;
pub const initializeAllAsmPrinters = target.LLVMInitializeAllAsmPrinters;
pub const initializeAllAsmParsers = target.LLVMInitializeAllAsmParsers;
pub const initializeAllDisassemblers = target.LLVMInitializeAllDisassemblers;
pub const initializeNativeTarget = target.LLVMInitializeNativeTarget;
pub const initializeNativeAsmParser = target.LLVMInitializeNativeAsmParser;
pub const initializeNativeAsmPrinter = target.LLVMInitializeNativeAsmPrinter;
pub const initializeNativeDisassembler = target.LLVMInitializeNativeDisassembler;
